/*
 * cross.h
 *
 *  Created on: 2 Apr 2017
 *      Author: richie
 */

#ifndef CROSS_H_
#define CROSS_H_

/*
 * Definition of boolean types
 * This avoids using <stdbool.h>
 */
typedef int bool;
enum { false, true };

/*
 * The slot template
 */
struct slot{
	//row number
	int row;
	//column number
	int column;

	// adjacent left slot
	struct slot *left;
	// adjacent right slot
	struct slot *right;
	// adjacent up slot
	struct slot *up;
	// adjacent down slot
	struct slot *down;
}slot;

/*
 * FUNCTIONS PROTOTYPES
 */

/*
 * Functions getBoardSize and getDesiredElement
 * manage the interaction with the users
 */

//Asks the user to provide as input the size of the board
//Returns the size of the board
int getBoardSize();

//Asks the user to insert the row and the column of the element
//she wants to find given a board of size equal to maxsize
void getDesiredElement(int maxsize, int * row, int * col);

/*
 * Functions createBoard and reachDesiredElement
 * manage the creation and manipulation of the board
 */
/*
 * This function creates the board
 * Parameters:
 * 	boardSize: the size of the board
 * 	upLeft: pointer of pointer to slot at position (0, 0)
 * 	upRight: pointer of pointer to slot at position (0, size -1)
 * 	downLeft: pointer of pointer to slot at position (size -1, 0)
 * 	upLeft: pointer of pointer to slot at position (size - 1, size -1)
 */
void createBoard(int boardSize, struct slot **upLeft, struct slot **upRight, struct slot **downLeft, struct slot **downRight);

/*
 * This function traverses the board to find a slot at a predefined
 * position (row, column)
 * Parameters:
 * 	row: the row in which the desired slot is located
 * 	column: the column in which the desired slot is located
 * 	initialSlot: the slot from which the slot search should start
 */
void reachDesiredElement(int row, int column, struct slot * initialSlot);

struct Player{

		char Player_Name[50];
		char Player_Type[50];
		char Current_Pos[50]; // is assigned slot type for player
		int Current_PosNo; // is assigned number corresponding to index value of slot type e.g. if slot[2].Slot_Type is City, player.Current_Pos will = City and player.Current_Pos will = 2
		float Life_Points; // is assigned 100 for player life points
		int Smartness; // is assigned a value depending on player.Player_Type.
		int Strength; // see ^
		int Magic_Skills; // see ^
		int Luck; // see ^
		int Dexterity; // see ^
};

struct Slot{

	char Slot_Type[50]; // is assigned a slot type randomly e.g. slot.Slot_Type = "City"
	int Slot_Tag; // used to keep track of who is in what slot
	int counter; // counter used to keep track of if a slot is occupied
};

// Function definitions
void ELF(struct Player *player);
void WIZARD(struct Player *player);
void HUMAN(struct Player *player);
void OGRE(struct Player *player);
void AssignType(struct Player *player);
void ModStr(struct Player *player);
void ModMag(struct Player *player);
void ReverseModStr(struct Player *player);
void ReverseModMag(struct Player *player);
void Attack(struct Player *attacker,struct Player *attacked);


#endif
